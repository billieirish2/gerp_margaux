Names: Margaux Herant & Warren Lowe
utlns: mheran01 & wlowe02

Answer the questions below, and submit your answers under the assignment
"gerp Design Checkoff" on Gradescope. You must sign up for a design checkoff
slot with a TA to discuss your provided answers (see spec for sign up link).
Make sure to submit this file *prior* to your design checkoff.

For each question, give as much detail as you feel is necessary.

1. What classes and structs will you implement for your program? For each class,
   provide a list of public functions of that class; for each struct, provide a
   list of member variables.

Answer: An index class, which traverses the FSTree and if it encounters a file
(leaf), it opens it and stores all the words in a map.
        
2. Describe the index that you will build for querying. What specific data
   structures will you use to build this index? *Important*: Bring an
   accompanying drawing of your index structure when you come to your checkoff.

   A map with two string objects (map<std::string, std::vector<int_pair>>), the
second value represents all the paths to the word and is the key. 

3. To use your index, you will use something for lookup (the key) and you will
   get some associated data back (the value). What are the C++ *types* of your
   index's key and value? Examples of valid types: int, string,
   vector<string>, vector<list<string>>; you may also define custom types using
   structs/classes, e.g., Animal and vector<Animal> are valid types if you
   define a struct/class named Animal. If your key/value types involve custom
   classes/structs, they should be included in your answer to question #1.
                
Answer:

   Key type: word
   Value type: std::vector<int_pair>  

4. Explain what a collision is versus having multiple lines associated with 
   a particular word. Write (and/or draw) out an example of when a 
   collision occurs. Write (and/or draw) out an example of when multiple 
   lines associated with a single word. 

Answer: A collision is when two key are assigned the same slot on a hash map.
We handle this by making the value be a vector of int_pair structs, which
contain a value (string word) which is the word associated with the int_pair.
That way, if two keys are assigned the same slot, two int_pair structs can
exist as values, with a member variable in the struct delineating which
struct corresponds to which key value.

5. What do you expect the *space* complexity of your index will be? How many
   times will a single line be stored according to your data structures?

Answer: The number of words it has is the number of times 

6. What is the time complexity of *building* your index? If you refer to some
   variable, be sure to specify what the variable refers to, e.g., in "O(n)",
   state explicitly what "n" is.

Answer: For every word in the directory, a new entry in the map needs to be made
if it does not exist already and a file path is added to the vector of file
paths.
                
7. What is the time complexity of *using* your index for lookup? As above,
   be specific about variables you use.

Answer:

8. How will you handle case-sensitive search?
   What is the time complexity (should be close to O(1))?

Answer:

9. How will you handle case-insensitive search?
   What is the time complexity (should be close to O(1))?

Answer:

10. How are you handling duplicate words within a line? Consider these two example 
   lines: 

      (i) the cat and the dog 
      (ii) the cat and THE dog 

   If a user does a case sensitive query on line (i) it should report 'the' only 
   once by showing the line only once in the output. How will you do this? 

   If a user does a case insensitive query on line (ii) it should report 'the' 
   only once by showing the line only once in the output. How will you do this? 

Answer:

11. How will you test your implementation and what specific evidence of testing
    will you submit?

Answer:

12. What is your schedule for completing this assignment? Include specific dates
    and the tasks that you would like to accomplish by each date. Do not forget
    testing!

Answer: 